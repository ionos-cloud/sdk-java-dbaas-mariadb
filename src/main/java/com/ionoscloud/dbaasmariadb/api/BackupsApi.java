/*
 * IONOS DBaaS MariaDB REST API
 * An enterprise-grade Database is provided as a Service (DBaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.  The API allows you to create additional MariaDB database clusters or modify existing ones. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.dbaasmariadb.api;

import com.ionoscloud.dbaasmariadb.ApiCallback;
import com.ionoscloud.dbaasmariadb.ApiClient;
import com.ionoscloud.dbaasmariadb.ApiException;
import com.ionoscloud.dbaasmariadb.ApiResponse;
import com.ionoscloud.dbaasmariadb.Configuration;
import com.ionoscloud.dbaasmariadb.Pair;
import com.ionoscloud.dbaasmariadb.ProgressRequestBody;
import com.ionoscloud.dbaasmariadb.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ionoscloud.dbaasmariadb.model.BackupList;
import com.ionoscloud.dbaasmariadb.model.BackupResponse;
import com.ionoscloud.dbaasmariadb.model.InlineResponse400;
import com.ionoscloud.dbaasmariadb.model.InlineResponse401;
import com.ionoscloud.dbaasmariadb.model.InlineResponse403;
import com.ionoscloud.dbaasmariadb.model.InlineResponse404;
import com.ionoscloud.dbaasmariadb.model.InlineResponse405;
import com.ionoscloud.dbaasmariadb.model.InlineResponse415;
import com.ionoscloud.dbaasmariadb.model.InlineResponse422;
import com.ionoscloud.dbaasmariadb.model.InlineResponse429;
import com.ionoscloud.dbaasmariadb.model.InlineResponse500;
import com.ionoscloud.dbaasmariadb.model.InlineResponse503;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BackupsApi {
    private ApiClient localVarApiClient;

    public BackupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BackupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for backupsFindById
     * @param backupId The unique ID of the backup. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupsFindByIdCall(String backupId, final ApiCallback<BackupResponse> _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/backups/{backupId}"
            .replaceAll("\\{" + "backupId" + "\\}", localVarApiClient.escapeString(backupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call backupsFindByIdValidateBeforeCall(String backupId, final ApiCallback<BackupResponse> _callback) throws ApiException {
        
        // verify the required parameter 'backupId' is set
        if (backupId == null) {
            throw new ApiException("Missing the required parameter 'backupId' when calling backupsFindById(Async)");
        }
        

        okhttp3.Call localVarCall = backupsFindByIdCall(backupId, _callback);
        return localVarCall;

    }

    /**
     * Fetch a cluster&#39;s backups
     * Retrieve a MariaDB cluster&#39;s backups by using its ID. This value can be found when you GET the list of MariaDB cluster backups. 
     * @param backupId The unique ID of the backup. (required)
     * @return BackupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public BackupResponse backupsFindById(String backupId) throws ApiException {
        ApiResponse<BackupResponse> localVarResp = backupsFindByIdWithHttpInfo(backupId);
        return localVarResp.getData();
    }

    /**
     * Fetch a cluster&#39;s backups
     * Retrieve a MariaDB cluster&#39;s backups by using its ID. This value can be found when you GET the list of MariaDB cluster backups. 
     * @param backupId The unique ID of the backup. (required)
     * @return ApiResponse&lt;BackupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupResponse> backupsFindByIdWithHttpInfo(String backupId) throws ApiException {
        okhttp3.Call localVarCall = backupsFindByIdValidateBeforeCall(backupId, null);
        Type localVarReturnType = new TypeToken<BackupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a cluster&#39;s backups (asynchronously)
     * Retrieve a MariaDB cluster&#39;s backups by using its ID. This value can be found when you GET the list of MariaDB cluster backups. 
     * @param backupId The unique ID of the backup. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupsFindByIdAsync(String backupId, final ApiCallback<BackupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = backupsFindByIdValidateBeforeCall(backupId, _callback);
        Type localVarReturnType = new TypeToken<BackupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for backupsGet
     * @param limit The maximum number of elements to return. Use together with &#39;offset&#39; for pagination. (optional, default to 100)
     * @param offset The first element to return. Use together with &#39;limit&#39; for pagination. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupsGetCall(Integer limit, Integer offset, final ApiCallback<BackupList> _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/backups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call backupsGetValidateBeforeCall(Integer limit, Integer offset, final ApiCallback<BackupList> _callback) throws ApiException {
        

        okhttp3.Call localVarCall = backupsGetCall(limit, offset, _callback);
        return localVarCall;

    }

    /**
     * List of cluster&#39;s backups.
     * Retrieves all lists of backups for all MariaDB clusters in this contract. 
     * @param limit The maximum number of elements to return. Use together with &#39;offset&#39; for pagination. (optional, default to 100)
     * @param offset The first element to return. Use together with &#39;limit&#39; for pagination. (optional, default to 0)
     * @return BackupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public BackupList backupsGet(Integer limit, Integer offset) throws ApiException {
        ApiResponse<BackupList> localVarResp = backupsGetWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * List of cluster&#39;s backups.
     * Retrieves all lists of backups for all MariaDB clusters in this contract. 
     * @param limit The maximum number of elements to return. Use together with &#39;offset&#39; for pagination. (optional, default to 100)
     * @param offset The first element to return. Use together with &#39;limit&#39; for pagination. (optional, default to 0)
     * @return ApiResponse&lt;BackupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupList> backupsGetWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = backupsGetValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<BackupList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of cluster&#39;s backups. (asynchronously)
     * Retrieves all lists of backups for all MariaDB clusters in this contract. 
     * @param limit The maximum number of elements to return. Use together with &#39;offset&#39; for pagination. (optional, default to 100)
     * @param offset The first element to return. Use together with &#39;limit&#39; for pagination. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backupsGetAsync(Integer limit, Integer offset, final ApiCallback<BackupList> _callback) throws ApiException {

        okhttp3.Call localVarCall = backupsGetValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<BackupList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clusterBackupsGet
     * @param clusterId The unique ID of the cluster. (required)
     * @param limit The maximum number of elements to return. Use together with &#39;offset&#39; for pagination. (optional, default to 100)
     * @param offset The first element to return. Use together with &#39;limit&#39; for pagination. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterBackupsGetCall(String clusterId, Integer limit, Integer offset, final ApiCallback<BackupList> _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clusters/{clusterId}/backups"
            .replaceAll("\\{" + "clusterId" + "\\}", localVarApiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clusterBackupsGetValidateBeforeCall(String clusterId, Integer limit, Integer offset, final ApiCallback<BackupList> _callback) throws ApiException {
        
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling clusterBackupsGet(Async)");
        }
        

        okhttp3.Call localVarCall = clusterBackupsGetCall(clusterId, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * List backups of cluster
     * Retrieves a list of all backups of the given MariaDB cluster. 
     * @param clusterId The unique ID of the cluster. (required)
     * @param limit The maximum number of elements to return. Use together with &#39;offset&#39; for pagination. (optional, default to 100)
     * @param offset The first element to return. Use together with &#39;limit&#39; for pagination. (optional, default to 0)
     * @return BackupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public BackupList clusterBackupsGet(String clusterId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<BackupList> localVarResp = clusterBackupsGetWithHttpInfo(clusterId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * List backups of cluster
     * Retrieves a list of all backups of the given MariaDB cluster. 
     * @param clusterId The unique ID of the cluster. (required)
     * @param limit The maximum number of elements to return. Use together with &#39;offset&#39; for pagination. (optional, default to 100)
     * @param offset The first element to return. Use together with &#39;limit&#39; for pagination. (optional, default to 0)
     * @return ApiResponse&lt;BackupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupList> clusterBackupsGetWithHttpInfo(String clusterId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = clusterBackupsGetValidateBeforeCall(clusterId, limit, offset, null);
        Type localVarReturnType = new TypeToken<BackupList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List backups of cluster (asynchronously)
     * Retrieves a list of all backups of the given MariaDB cluster. 
     * @param clusterId The unique ID of the cluster. (required)
     * @param limit The maximum number of elements to return. Use together with &#39;offset&#39; for pagination. (optional, default to 100)
     * @param offset The first element to return. Use together with &#39;limit&#39; for pagination. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clusterBackupsGetAsync(String clusterId, Integer limit, Integer offset, final ApiCallback<BackupList> _callback) throws ApiException {

        okhttp3.Call localVarCall = clusterBackupsGetValidateBeforeCall(clusterId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<BackupList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
