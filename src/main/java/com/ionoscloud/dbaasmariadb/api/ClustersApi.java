/*
 * IONOS DBaaS MariaDB REST API
 * An enterprise-grade Database is provided as a Service (DBaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.  The API allows you to create additional MariaDB database clusters or modify existing ones. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.dbaasmariadb.api;

import com.ionoscloud.dbaasmariadb.ApiCallback;
import com.ionoscloud.dbaasmariadb.ApiClient;
import com.ionoscloud.dbaasmariadb.ApiException;
import com.ionoscloud.dbaasmariadb.ApiResponse;
import com.ionoscloud.dbaasmariadb.Configuration;
import com.ionoscloud.dbaasmariadb.Pair;
import com.ionoscloud.dbaasmariadb.ProgressRequestBody;
import com.ionoscloud.dbaasmariadb.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ionoscloud.dbaasmariadb.model.ClusterList;
import com.ionoscloud.dbaasmariadb.model.ClusterResponse;
import com.ionoscloud.dbaasmariadb.model.CreateClusterRequest;
import com.ionoscloud.dbaasmariadb.model.InlineResponse400;
import com.ionoscloud.dbaasmariadb.model.InlineResponse401;
import com.ionoscloud.dbaasmariadb.model.InlineResponse403;
import com.ionoscloud.dbaasmariadb.model.InlineResponse404;
import com.ionoscloud.dbaasmariadb.model.InlineResponse405;
import com.ionoscloud.dbaasmariadb.model.InlineResponse415;
import com.ionoscloud.dbaasmariadb.model.InlineResponse422;
import com.ionoscloud.dbaasmariadb.model.InlineResponse429;
import com.ionoscloud.dbaasmariadb.model.InlineResponse500;
import com.ionoscloud.dbaasmariadb.model.InlineResponse503;
import com.ionoscloud.dbaasmariadb.model.PatchClusterRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClustersApi {
    private ApiClient localVarApiClient;

    public ClustersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClustersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for clustersDelete
     * @param clusterId The unique ID of the cluster. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted cluster with &#x60;metadata.state&#x60; set to \&quot;DESTROYING\&quot;.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clustersDeleteCall(String clusterId, final ApiCallback<ClusterResponse> _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clusters/{clusterId}"
            .replaceAll("\\{" + "clusterId" + "\\}", localVarApiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clustersDeleteValidateBeforeCall(String clusterId, final ApiCallback<ClusterResponse> _callback) throws ApiException {
        
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling clustersDelete(Async)");
        }
        

        okhttp3.Call localVarCall = clustersDeleteCall(clusterId, _callback);
        return localVarCall;

    }

    /**
     * Delete a cluster
     * Delete a MariaDB cluster.
     * @param clusterId The unique ID of the cluster. (required)
     * @return ClusterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted cluster with &#x60;metadata.state&#x60; set to \&quot;DESTROYING\&quot;.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public ClusterResponse clustersDelete(String clusterId) throws ApiException {
        ApiResponse<ClusterResponse> localVarResp = clustersDeleteWithHttpInfo(clusterId);
        return localVarResp.getData();
    }

    /**
     * Delete a cluster
     * Delete a MariaDB cluster.
     * @param clusterId The unique ID of the cluster. (required)
     * @return ApiResponse&lt;ClusterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted cluster with &#x60;metadata.state&#x60; set to \&quot;DESTROYING\&quot;.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClusterResponse> clustersDeleteWithHttpInfo(String clusterId) throws ApiException {
        okhttp3.Call localVarCall = clustersDeleteValidateBeforeCall(clusterId, null);
        Type localVarReturnType = new TypeToken<ClusterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a cluster (asynchronously)
     * Delete a MariaDB cluster.
     * @param clusterId The unique ID of the cluster. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted cluster with &#x60;metadata.state&#x60; set to \&quot;DESTROYING\&quot;.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clustersDeleteAsync(String clusterId, final ApiCallback<ClusterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clustersDeleteValidateBeforeCall(clusterId, _callback);
        Type localVarReturnType = new TypeToken<ClusterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clustersFindById
     * @param clusterId The unique ID of the cluster. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clustersFindByIdCall(String clusterId, final ApiCallback<ClusterResponse> _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clusters/{clusterId}"
            .replaceAll("\\{" + "clusterId" + "\\}", localVarApiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clustersFindByIdValidateBeforeCall(String clusterId, final ApiCallback<ClusterResponse> _callback) throws ApiException {
        
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling clustersFindById(Async)");
        }
        

        okhttp3.Call localVarCall = clustersFindByIdCall(clusterId, _callback);
        return localVarCall;

    }

    /**
     * Fetch a cluster
     * You can retrieve a MariaDB cluster by using its ID. This value can be found in the response body when a MariaDB cluster is created or when you GET a list of MariaDB clusters. 
     * @param clusterId The unique ID of the cluster. (required)
     * @return ClusterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public ClusterResponse clustersFindById(String clusterId) throws ApiException {
        ApiResponse<ClusterResponse> localVarResp = clustersFindByIdWithHttpInfo(clusterId);
        return localVarResp.getData();
    }

    /**
     * Fetch a cluster
     * You can retrieve a MariaDB cluster by using its ID. This value can be found in the response body when a MariaDB cluster is created or when you GET a list of MariaDB clusters. 
     * @param clusterId The unique ID of the cluster. (required)
     * @return ApiResponse&lt;ClusterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClusterResponse> clustersFindByIdWithHttpInfo(String clusterId) throws ApiException {
        okhttp3.Call localVarCall = clustersFindByIdValidateBeforeCall(clusterId, null);
        Type localVarReturnType = new TypeToken<ClusterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a cluster (asynchronously)
     * You can retrieve a MariaDB cluster by using its ID. This value can be found in the response body when a MariaDB cluster is created or when you GET a list of MariaDB clusters. 
     * @param clusterId The unique ID of the cluster. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clustersFindByIdAsync(String clusterId, final ApiCallback<ClusterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clustersFindByIdValidateBeforeCall(clusterId, _callback);
        Type localVarReturnType = new TypeToken<ClusterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clustersGet
     * @param limit The maximum number of elements to return. Use together with &#39;offset&#39; for pagination. (optional, default to 100)
     * @param offset The first element to return. Use together with &#39;limit&#39; for pagination. (optional, default to 0)
     * @param filterName Response filter to list only the MariaDB clusters that contain the specified name. The value is case insensitive and matched on the &#39;displayName&#39; field.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clustersGetCall(Integer limit, Integer offset, String filterName, final ApiCallback<ClusterList> _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (filterName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.name", filterName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clustersGetValidateBeforeCall(Integer limit, Integer offset, String filterName, final ApiCallback<ClusterList> _callback) throws ApiException {
        

        okhttp3.Call localVarCall = clustersGetCall(limit, offset, filterName, _callback);
        return localVarCall;

    }

    /**
     * List clusters
     * Retrieves a list of MariaDB clusters.
     * @param limit The maximum number of elements to return. Use together with &#39;offset&#39; for pagination. (optional, default to 100)
     * @param offset The first element to return. Use together with &#39;limit&#39; for pagination. (optional, default to 0)
     * @param filterName Response filter to list only the MariaDB clusters that contain the specified name. The value is case insensitive and matched on the &#39;displayName&#39; field.  (optional)
     * @return ClusterList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public ClusterList clustersGet(Integer limit, Integer offset, String filterName) throws ApiException {
        ApiResponse<ClusterList> localVarResp = clustersGetWithHttpInfo(limit, offset, filterName);
        return localVarResp.getData();
    }

    /**
     * List clusters
     * Retrieves a list of MariaDB clusters.
     * @param limit The maximum number of elements to return. Use together with &#39;offset&#39; for pagination. (optional, default to 100)
     * @param offset The first element to return. Use together with &#39;limit&#39; for pagination. (optional, default to 0)
     * @param filterName Response filter to list only the MariaDB clusters that contain the specified name. The value is case insensitive and matched on the &#39;displayName&#39; field.  (optional)
     * @return ApiResponse&lt;ClusterList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClusterList> clustersGetWithHttpInfo(Integer limit, Integer offset, String filterName) throws ApiException {
        okhttp3.Call localVarCall = clustersGetValidateBeforeCall(limit, offset, filterName, null);
        Type localVarReturnType = new TypeToken<ClusterList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List clusters (asynchronously)
     * Retrieves a list of MariaDB clusters.
     * @param limit The maximum number of elements to return. Use together with &#39;offset&#39; for pagination. (optional, default to 100)
     * @param offset The first element to return. Use together with &#39;limit&#39; for pagination. (optional, default to 0)
     * @param filterName Response filter to list only the MariaDB clusters that contain the specified name. The value is case insensitive and matched on the &#39;displayName&#39; field.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clustersGetAsync(Integer limit, Integer offset, String filterName, final ApiCallback<ClusterList> _callback) throws ApiException {

        okhttp3.Call localVarCall = clustersGetValidateBeforeCall(limit, offset, filterName, _callback);
        Type localVarReturnType = new TypeToken<ClusterList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clustersPatch
     * @param clusterId The unique ID of the cluster. (required)
     * @param patchClusterRequest Attributes of the cluster which should be modified. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clustersPatchCall(String clusterId, PatchClusterRequest patchClusterRequest, final ApiCallback<ClusterResponse> _callback) throws ApiException {
        Object localVarPostBody = patchClusterRequest;

        // create path and map variables
        String localVarPath = "/clusters/{clusterId}"
            .replaceAll("\\{" + "clusterId" + "\\}", localVarApiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clustersPatchValidateBeforeCall(String clusterId, PatchClusterRequest patchClusterRequest, final ApiCallback<ClusterResponse> _callback) throws ApiException {
        
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling clustersPatch(Async)");
        }
        
        // verify the required parameter 'patchClusterRequest' is set
        if (patchClusterRequest == null) {
            throw new ApiException("Missing the required parameter 'patchClusterRequest' when calling clustersPatch(Async)");
        }
        

        okhttp3.Call localVarCall = clustersPatchCall(clusterId, patchClusterRequest, _callback);
        return localVarCall;

    }

    /**
     * Update a cluster
     * Updates mutable attributes on a MariaDB cluster.
     * @param clusterId The unique ID of the cluster. (required)
     * @param patchClusterRequest Attributes of the cluster which should be modified. (required)
     * @return ClusterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public ClusterResponse clustersPatch(String clusterId, PatchClusterRequest patchClusterRequest) throws ApiException {
        ApiResponse<ClusterResponse> localVarResp = clustersPatchWithHttpInfo(clusterId, patchClusterRequest);
        return localVarResp.getData();
    }

    /**
     * Update a cluster
     * Updates mutable attributes on a MariaDB cluster.
     * @param clusterId The unique ID of the cluster. (required)
     * @param patchClusterRequest Attributes of the cluster which should be modified. (required)
     * @return ApiResponse&lt;ClusterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClusterResponse> clustersPatchWithHttpInfo(String clusterId, PatchClusterRequest patchClusterRequest) throws ApiException {
        okhttp3.Call localVarCall = clustersPatchValidateBeforeCall(clusterId, patchClusterRequest, null);
        Type localVarReturnType = new TypeToken<ClusterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a cluster (asynchronously)
     * Updates mutable attributes on a MariaDB cluster.
     * @param clusterId The unique ID of the cluster. (required)
     * @param patchClusterRequest Attributes of the cluster which should be modified. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clustersPatchAsync(String clusterId, PatchClusterRequest patchClusterRequest, final ApiCallback<ClusterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clustersPatchValidateBeforeCall(clusterId, patchClusterRequest, _callback);
        Type localVarReturnType = new TypeToken<ClusterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clustersPost
     * @param createClusterRequest The cluster to be created. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created cluster is returned with &#x60;metadata.state&#x60; set to \&quot;BUSY\&quot;.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clustersPostCall(CreateClusterRequest createClusterRequest, final ApiCallback<ClusterResponse> _callback) throws ApiException {
        Object localVarPostBody = createClusterRequest;

        // create path and map variables
        String localVarPath = "/clusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clustersPostValidateBeforeCall(CreateClusterRequest createClusterRequest, final ApiCallback<ClusterResponse> _callback) throws ApiException {
        
        // verify the required parameter 'createClusterRequest' is set
        if (createClusterRequest == null) {
            throw new ApiException("Missing the required parameter 'createClusterRequest' when calling clustersPost(Async)");
        }
        

        okhttp3.Call localVarCall = clustersPostCall(createClusterRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a cluster
     * Creates a new MariaDB cluster. 
     * @param createClusterRequest The cluster to be created. (required)
     * @return ClusterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created cluster is returned with &#x60;metadata.state&#x60; set to \&quot;BUSY\&quot;.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public ClusterResponse clustersPost(CreateClusterRequest createClusterRequest) throws ApiException {
        ApiResponse<ClusterResponse> localVarResp = clustersPostWithHttpInfo(createClusterRequest);
        return localVarResp.getData();
    }

    /**
     * Create a cluster
     * Creates a new MariaDB cluster. 
     * @param createClusterRequest The cluster to be created. (required)
     * @return ApiResponse&lt;ClusterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created cluster is returned with &#x60;metadata.state&#x60; set to \&quot;BUSY\&quot;.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClusterResponse> clustersPostWithHttpInfo(CreateClusterRequest createClusterRequest) throws ApiException {
        okhttp3.Call localVarCall = clustersPostValidateBeforeCall(createClusterRequest, null);
        Type localVarReturnType = new TypeToken<ClusterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a cluster (asynchronously)
     * Creates a new MariaDB cluster. 
     * @param createClusterRequest The cluster to be created. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created cluster is returned with &#x60;metadata.state&#x60; set to \&quot;BUSY\&quot;.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clustersPostAsync(CreateClusterRequest createClusterRequest, final ApiCallback<ClusterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clustersPostValidateBeforeCall(createClusterRequest, _callback);
        Type localVarReturnType = new TypeToken<ClusterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
