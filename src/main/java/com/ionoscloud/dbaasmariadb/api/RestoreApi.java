/*
 * IONOS DBaaS MariaDB REST API
 * An enterprise-grade Database is provided as a Service (DBaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.  The API allows you to create additional MariaDB database clusters or modify existing ones. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.dbaasmariadb.api;

import com.ionoscloud.dbaasmariadb.ApiCallback;
import com.ionoscloud.dbaasmariadb.ApiClient;
import com.ionoscloud.dbaasmariadb.ApiException;
import com.ionoscloud.dbaasmariadb.ApiResponse;
import com.ionoscloud.dbaasmariadb.Configuration;
import com.ionoscloud.dbaasmariadb.Pair;
import com.ionoscloud.dbaasmariadb.ProgressRequestBody;
import com.ionoscloud.dbaasmariadb.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ionoscloud.dbaasmariadb.model.InlineResponse400;
import com.ionoscloud.dbaasmariadb.model.InlineResponse401;
import com.ionoscloud.dbaasmariadb.model.InlineResponse403;
import com.ionoscloud.dbaasmariadb.model.InlineResponse404;
import com.ionoscloud.dbaasmariadb.model.InlineResponse405;
import com.ionoscloud.dbaasmariadb.model.InlineResponse415;
import com.ionoscloud.dbaasmariadb.model.InlineResponse422;
import com.ionoscloud.dbaasmariadb.model.InlineResponse429;
import com.ionoscloud.dbaasmariadb.model.InlineResponse500;
import com.ionoscloud.dbaasmariadb.model.InlineResponse503;
import com.ionoscloud.dbaasmariadb.model.RestoreRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RestoreApi {
    private ApiClient localVarApiClient;

    public RestoreApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RestoreApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for clustersRestore
     * @param clusterId The unique ID of the cluster. (required)
     * @param restoreRequest The backup to restore from. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clustersRestoreCall(String clusterId, RestoreRequest restoreRequest, final ApiCallback<Void> _callback) throws ApiException {
        Object localVarPostBody = restoreRequest;

        // create path and map variables
        String localVarPath = "/clusters/{clusterId}/restore"
            .replaceAll("\\{" + "clusterId" + "\\}", localVarApiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clustersRestoreValidateBeforeCall(String clusterId, RestoreRequest restoreRequest, final ApiCallback<Void> _callback) throws ApiException {
        
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling clustersRestore(Async)");
        }
        
        // verify the required parameter 'restoreRequest' is set
        if (restoreRequest == null) {
            throw new ApiException("Missing the required parameter 'restoreRequest' when calling clustersRestore(Async)");
        }
        

        okhttp3.Call localVarCall = clustersRestoreCall(clusterId, restoreRequest, _callback);
        return localVarCall;

    }

    /**
     * In-place restore of a cluster.
     * Restore a MariaDB cluster from a backup.  Conditions:  - The backup must belong to the MariaDB cluster to    be restored.  - The cluster must be in the state \&quot;AVAILABLE\&quot;.
     * @param clusterId The unique ID of the cluster. (required)
     * @param restoreRequest The backup to restore from. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public void clustersRestore(String clusterId, RestoreRequest restoreRequest) throws ApiException {
        clustersRestoreWithHttpInfo(clusterId, restoreRequest);
    }

    /**
     * In-place restore of a cluster.
     * Restore a MariaDB cluster from a backup.  Conditions:  - The backup must belong to the MariaDB cluster to    be restored.  - The cluster must be in the state \&quot;AVAILABLE\&quot;.
     * @param clusterId The unique ID of the cluster. (required)
     * @param restoreRequest The backup to restore from. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clustersRestoreWithHttpInfo(String clusterId, RestoreRequest restoreRequest) throws ApiException {
        okhttp3.Call localVarCall = clustersRestoreValidateBeforeCall(clusterId, restoreRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * In-place restore of a cluster. (asynchronously)
     * Restore a MariaDB cluster from a backup.  Conditions:  - The backup must belong to the MariaDB cluster to    be restored.  - The cluster must be in the state \&quot;AVAILABLE\&quot;.
     * @param clusterId The unique ID of the cluster. (required)
     * @param restoreRequest The backup to restore from. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Parse error. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Unsupported HTTP method. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported content type. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation error. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request rate limit exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Maintenance. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clustersRestoreAsync(String clusterId, RestoreRequest restoreRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clustersRestoreValidateBeforeCall(clusterId, restoreRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
